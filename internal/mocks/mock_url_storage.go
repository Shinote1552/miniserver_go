// Code generated by MockGen. DO NOT EDIT.
// Source: url_shortener.go
//
// Generated by this command:
//
//	mockgen -source=url_shortener.go -destination=../../mocks/mock_url_storage.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	models "urlshortener/internal/domain/models"

	gomock "go.uber.org/mock/gomock"
)

// MockURLStorage is a mock of URLStorage interface.
type MockURLStorage struct {
	ctrl     *gomock.Controller
	recorder *MockURLStorageMockRecorder
	isgomock struct{}
}

// MockURLStorageMockRecorder is the mock recorder for MockURLStorage.
type MockURLStorageMockRecorder struct {
	mock *MockURLStorage
}

// NewMockURLStorage creates a new mock instance.
func NewMockURLStorage(ctrl *gomock.Controller) *MockURLStorage {
	mock := &MockURLStorage{ctrl: ctrl}
	mock.recorder = &MockURLStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLStorage) EXPECT() *MockURLStorageMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockURLStorage) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockURLStorageMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockURLStorage)(nil).Ping), ctx)
}

// ShortenedLinkBatchCreate mocks base method.
func (m *MockURLStorage) ShortenedLinkBatchCreate(ctx context.Context, urls []models.ShortenedLink) ([]models.ShortenedLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShortenedLinkBatchCreate", ctx, urls)
	ret0, _ := ret[0].([]models.ShortenedLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShortenedLinkBatchCreate indicates an expected call of ShortenedLinkBatchCreate.
func (mr *MockURLStorageMockRecorder) ShortenedLinkBatchCreate(ctx, urls any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShortenedLinkBatchCreate", reflect.TypeOf((*MockURLStorage)(nil).ShortenedLinkBatchCreate), ctx, urls)
}

// ShortenedLinkBatchExists mocks base method.
func (m *MockURLStorage) ShortenedLinkBatchExists(ctx context.Context, originalURLs []string) ([]models.ShortenedLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShortenedLinkBatchExists", ctx, originalURLs)
	ret0, _ := ret[0].([]models.ShortenedLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShortenedLinkBatchExists indicates an expected call of ShortenedLinkBatchExists.
func (mr *MockURLStorageMockRecorder) ShortenedLinkBatchExists(ctx, originalURLs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShortenedLinkBatchExists", reflect.TypeOf((*MockURLStorage)(nil).ShortenedLinkBatchExists), ctx, originalURLs)
}

// ShortenedLinkCreate mocks base method.
func (m *MockURLStorage) ShortenedLinkCreate(ctx context.Context, url models.ShortenedLink) (models.ShortenedLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShortenedLinkCreate", ctx, url)
	ret0, _ := ret[0].(models.ShortenedLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShortenedLinkCreate indicates an expected call of ShortenedLinkCreate.
func (mr *MockURLStorageMockRecorder) ShortenedLinkCreate(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShortenedLinkCreate", reflect.TypeOf((*MockURLStorage)(nil).ShortenedLinkCreate), ctx, url)
}

// ShortenedLinkGetBatchByUser mocks base method.
func (m *MockURLStorage) ShortenedLinkGetBatchByUser(ctx context.Context, id int64) ([]models.ShortenedLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShortenedLinkGetBatchByUser", ctx, id)
	ret0, _ := ret[0].([]models.ShortenedLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShortenedLinkGetBatchByUser indicates an expected call of ShortenedLinkGetBatchByUser.
func (mr *MockURLStorageMockRecorder) ShortenedLinkGetBatchByUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShortenedLinkGetBatchByUser", reflect.TypeOf((*MockURLStorage)(nil).ShortenedLinkGetBatchByUser), ctx, id)
}

// ShortenedLinkGetByOriginalURL mocks base method.
func (m *MockURLStorage) ShortenedLinkGetByOriginalURL(ctx context.Context, originalURL string) (models.ShortenedLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShortenedLinkGetByOriginalURL", ctx, originalURL)
	ret0, _ := ret[0].(models.ShortenedLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShortenedLinkGetByOriginalURL indicates an expected call of ShortenedLinkGetByOriginalURL.
func (mr *MockURLStorageMockRecorder) ShortenedLinkGetByOriginalURL(ctx, originalURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShortenedLinkGetByOriginalURL", reflect.TypeOf((*MockURLStorage)(nil).ShortenedLinkGetByOriginalURL), ctx, originalURL)
}

// ShortenedLinkGetByShortKey mocks base method.
func (m *MockURLStorage) ShortenedLinkGetByShortKey(ctx context.Context, shortKey string) (models.ShortenedLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShortenedLinkGetByShortKey", ctx, shortKey)
	ret0, _ := ret[0].(models.ShortenedLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShortenedLinkGetByShortKey indicates an expected call of ShortenedLinkGetByShortKey.
func (mr *MockURLStorageMockRecorder) ShortenedLinkGetByShortKey(ctx, shortKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShortenedLinkGetByShortKey", reflect.TypeOf((*MockURLStorage)(nil).ShortenedLinkGetByShortKey), ctx, shortKey)
}

// WithinTx mocks base method.
func (m *MockURLStorage) WithinTx(ctx context.Context, fn func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithinTx", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithinTx indicates an expected call of WithinTx.
func (mr *MockURLStorageMockRecorder) WithinTx(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithinTx", reflect.TypeOf((*MockURLStorage)(nil).WithinTx), ctx, fn)
}
